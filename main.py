import asyncio
import logging

from decouple import config


from aiogram import Bot, Dispatcher, Router, types,F
from aiogram.utils import keyboard
from aiogram.filters import CommandStart, Command   


TOKEN = config("TOKEN")

dp = Dispatcher() # –æ–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π)
bot = Bot(TOKEN)

# async - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞)
# await - –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏




kb_builder = keyboard.ReplyKeyboardBuilder()
kb_builder.button(text = "‚ù§Ô∏è–ö–Ω–æ–ø–∫–∞ 1")
kb_builder.button(text = "üß°–ö–Ω–æ–ø–∫–∞ 2")

kb_builder.button(text = "üíö–ö–Ω–æ–ø–∫–∞ 3")
kb_builder.adjust(2)
kb_builder.row(
    types.KeyboardButton(text = "üíô–ö–Ω–æ–ø–∫–∞ 4"),
    types.KeyboardButton(text = "üíú–ö–Ω–æ–ø–∫–∞ 5"),
)

menu_kb = types.ReplyKeyboardMarkup(keyboard=
[
    [
        types.KeyboardButton(text = "–í–Ü–î–ü–†–ê–í–ò–¢–ò –ö–û–ù–¢–ê–ö–¢", request_contact=True),
    ],
    [
        types.KeyboardButton(text = "–í–Ü–î–ü–†–ê–í–ò–¢–ò –ì–ï–û–õ–û–ö–ê–¶–Ü–Æ", request_location=True),
    ],
    [
        types.KeyboardButton(text = "‚ù§Ô∏è–ö–Ω–æ–ø–∫–∞ 1"),
        types.KeyboardButton(text = "üß°–ö–Ω–æ–ø–∫–∞ 2"),
    ],
    [
        types.KeyboardButton(text = "üíö–ö–Ω–æ–ø–∫–∞ 3"),
        types.KeyboardButton(text = "üíô–ö–Ω–æ–ø–∫–∞ 4"),
    ]
], resize_keyboard=True)

inline_kb = types.InlineKeyboardMarkup(inline_keyboard=[
    [
        types.InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 1", callback_data="button_1")
    ],
    [
        types.InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 2", callback_data="button_2")
    ],
    [
        types.InlineKeyboardButton(text="LMS", url="https://lms.ithillel.ua/"),
        types.InlineKeyboardButton(text="blog", url="https://blog.ithillel.ua/")
    ]
])

click_me_kb = keyboard.InlineKeyboardBuilder()
click_me_kb.button(text="ü™ô", callback_data="click_me")

users = [
]

def check_user_or_create(user_id):
    for user in users:
        if user["id"] == user_id:
            return user
    user = {
        "id": user_id,
        "count": 0
    }
    users.append(user)
    return user





@dp.message(CommandStart())
async def command_start_handler(message: types.Message):
    user = check_user_or_create(message.from_user.id)
    await message.answer(f"Hello, {message.from_user.full_name}!", reply_markup=inline_kb)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb_builder.as_markup())

@dp.message(Command("users"))
async def command_users_handler(message: types.Message):
    top5 = sorted(users, key=lambda x: x["count"], reverse=True)[:5]
    text =""
    for i, user in enumerate(top5):
        text += f"{i+1}. {user['id']} - {user['count']}\n"
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users)}\n\n–¢–æ–ø 5:\n{text}")
    
@dp.message(Command("game"))
async def command_game_handler(message: types.Message):
    user = check_user_or_create(message.from_user.id)
    
    await message.answer("–ö–ª–∏–∫–Ω–∏ –º–µ–Ω—è", reply_markup=click_me_kb.as_markup())
    
@dp.callback_query(F.data=="click_me")
async def click_me_handler(query: types.CallbackQuery):
    user = check_user_or_create(query.from_user.id)
    user["count"] += 1
    await query.message.edit_text(f'–ö–ª—ñ–∫–Ω–∏ –º–µ–Ω–µ!üòÆ\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ–∫—ñ–≤: {user["count"]}', reply_markup=click_me_kb.as_markup())
    
    

@dp.message(Command("delete"))
async def command_delete_handler(message: types.Message):
    await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Command("menu"))
async def command_menu_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=menu_kb)

@dp.message(F.text=="‚ù§Ô∏è–ö–Ω–æ–ø–∫–∞ 1")
async def button_1_handler(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 1")
    
@dp.message(F.text.in_(["üß°–ö–Ω–æ–ø–∫–∞ 2", "üíö–ö–Ω–æ–ø–∫–∞ 3"]))
async def button_2_handler(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 2 –∞–±–æ 3")

##-----------------Inline Keyboard-----------------##
@dp.callback_query(F.data=="button_1")
async def inline_button_1_handler(query: types.CallbackQuery):
    await query.message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 1")

@dp.callback_query(F.data=="button_2")
async def inline_button_2_handler(query: types.CallbackQuery):
    await query.message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 2")
    
    
    
    

@dp.message(F.contact)
async def contact_handler(message: types.Message):
    await message.answer(f"–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç: {message.contact}")
    print(message.contact)

@dp.message(F.location)
async def location_handler(message: types.Message):
    await message.answer(f"–í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è: {message.location}")
    print(message.location)

@dp.message(Command("special_buttons"))
async def cmd_special_buttons(message: types.Message):
    builder = keyboard.ReplyKeyboardBuilder()
    # –º–µ—Ç–æ–¥ row –ø–æ–∑–≤–æ–ª—è–µ—Ç —è–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä—è–¥
    # –∏–∑ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–π —Ä—è–¥
    # –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫...
    builder.row(
        types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
        types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    )
    # ... –≤—Ç–æ—Ä–æ–π –∏–∑ –æ–¥–Ω–æ–π ...
    builder.row(types.KeyboardButton(
        text="–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
        request_poll=types.KeyboardButtonPollType(type="quiz"))
    )
    # ... –∞ —Ç—Ä–µ—Ç–∏–π —Å–Ω–æ–≤–∞ –∏–∑ –¥–≤—É—Ö
    builder.row(
        types.KeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            request_user=types.KeyboardButtonRequestUser(
                request_id=1,
                user_is_premium=True
            )
        ),
        types.KeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ä—É–º–∞–º–∏",
            request_chat=types.KeyboardButtonRequestChat(
                request_id=2,
                chat_is_channel=False,
                chat_is_forum=True
            )
        )
    )
    # WebApp-–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, —Å–æ—Ä—Ä–∏ :(

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )

@dp.message(F.poll)
async def poll_handler(message: types.Message):
    await message.answer(f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: {message.poll}")





async def main() -> None:
    await bot.set_my_commands([
        types.BotCommand(command="asd", description="–ó–∞–ø—Éasdasdasd—Å–∫ –±–æ—Ç–∞"),
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        types.BotCommand(command="menu", description="–ú–µ–Ω—é"),
        types.BotCommand(command="delete", description="–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"),
        types.BotCommand(command="special_buttons", description="–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"),
    ], scope=types.BotCommandScopeAllPrivateChats())
    # await bot.set_my_commands([], scope=types.BotCommandScopeAllPrivateChats())
    await dp.start_polling(bot)


if __name__ == "__main__":
    # logging.basicConfig(level=logging.INFO)
    asyncio.run(main())